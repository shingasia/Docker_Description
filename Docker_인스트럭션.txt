▶ https://docs.docker.com/engine/reference/builder/#from

< Dockerfile 인스트럭션 >
Docker는 Dockerfile에 작성된 인스트럭션들을 읽어서 이미지를 빌드할 수 있다.
▶ docker image build [OPTIONS] PATH | URL | -
docker build 명령은 Dockerfile, PATH, URL로부터 이미지를 빌드하는 명령이다.
PATH = directory on your local filesystem
URL = Git repository location

$ docker build .
$ docker build -f /path/to/a/Dockerfile . 
(-f, --file 옵션은 Dockerfile의 위치를 가리킨다. 기본 위치는 현재 디렉토리의 Dockerfile을 가리킨다)
$ docker build -t shykes/myapp .
$ docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .
(-t, --tag 옵션으로 빌드가 성공하면 새 이미지를 저장할 저장소와 태그를 지정할 수 있다)


1) FROM
The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. 
As such, a valid Dockerfile must start with a FROM instruction. 
The image can be any valid image – it is especially easy to start by pulling an image from the Public Repositories.


ex)
FROM [--platform=<platform>] <image> [AS <name>]
FROM [--platform=<platform>] <image>[:<tag>] [AS <name>]
FROM [--platform=<platform>] <image>[@<digest>] [AS <name>]


2) RUN
The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. 
The resulting committed image will be used for the next step in the Dockerfile.
RUN 인스트럭션은 현재 이미지 위에있는 새 레이어의 모든 명령을 실행하고 결과를 커밋합니다. 커밋 된 결과 이미지는의 다음 단계에 사용됩니다

Layering RUN instructions and generating commits conforms to the core concepts of Docker where commits are cheap and containers can be created from any point in an image’s history, much like source control.
RUN명령을 계층화 하고 커밋을 생성하는 것은 커밋이 저렴하고 소스 제어와 같이 이미지 기록의 모든 지점에서 컨테이너를 만들 수 있는 Docker의 핵심 개념을 따릅니다.


RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
RUN ["executable", "param1", "param2"] (exec form)


ex)
RUN /bin/bash -c 'source $HOME/.bashrc; \
echo $HOME'
Together they are equivalent to this single line:

RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'
To use a different shell, other than ‘/bin/sh’, use the exec form passing in the desired shell. For example:

RUN ["/bin/bash", "-c", "echo hello"]



3) CMD
하나의 Dockerfile에는 CMD 인스트럭션을 하나만 가질 수 있다. 둘 이상의 CMD 인스트럭션이 있으면 마지막 CMD만 적용된다.
CMD의 주요 목적은 실행중인 컨테이너에 기본값을 제공하는 것이다. 



CMD 인스트럭션은 다음 세가지 형태를 가진다
- CMD ["executable","param1","param2"] (exec form, this is the preferred form) exec 형태
- CMD ["param1","param2"] (as default parameters to ENTRYPOINT) -> ENTRYPOINT와 같이 쓰는 형태
- CMD command param1 param2 (shell form) -> 쉘 형태

If CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and ENTRYPOINT instructions should be specified with the JSON array format.
만약 CMD가 ENTRYPOINT에 지정된 명령에 사용할 인자를 전달하는 경우라면, CMD와 ENTRYPOINT 사이에 JSON 배열 형태로 기본 인자들이 지정되어야 한다.

Unlike the shell form, the exec form does not invoke a command shell.
쉘 형태는 exec 형태와 달리 명령 쉘을 호출하지 않는다.

When used in the shell or exec formats, the CMD instruction sets the command to be executed when running the image.
쉘 형태 또는 exec 형태로 사용하는 경우, CMD 인스트럭션은 이미지를 실행할 때 실행할 명령을 설정한다.



ex)
FROM ubuntu
CMD echo "This is a test." | wc -

FROM ubuntu
CMD ["/usr/bin/wc","--help"]

ENTRYPOINT ["/bin/ash", "-c"]
CMD ["env"]



4) EXPOSE
The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified.
EXPOSE 인스트럭션은 런타임에 지정된 네트워크 포트에서 수신 대기한다는 것을 Docker에 알린다. 포트가 TCP 또는 UDP에서 수신하는지 여부를 지정할 수 있으며 프로토콜이 지정되지 않은 경우 기본값은 TCP입니다.

The EXPOSE instruction does not actually publish the port.
EXPOSE 인스트럭션은 실제로 포트를 게시하지 않습니다.

To actually publish the port when running the container, use the -p flag on docker run to publish and map one or more ports, or the -P flag to publish all exposed ports and map them to high-order ports.
컨테이너를 실행할 때 실제로 포트를 게시하려면, docker run 명령에서 -p 플래그를 사용해서 하나 이상의 포트를 게시하고 매핑하거나, 또는 -P 플래그를 사용해서 모든 노출된 포트를 게시하고 상위 포트에 매핑한다.


ex)
EXPOSE 80/udp

EXPOSE 80/tcp
EXPOSE 80/udp




5) ADD
The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.
ADD 인스트럭션은 <src>로 부터 새 파일, 디렉토리 또는 원격 파일 URL을 <dest>에 지정한 이미지의 파일시스템에 추가한다

<src>는 여러개 지정 가능

각 <src>는 와일드카드를 포함할 수 있다.


ADD 인스트럭션은 다음 두 가지 형태를 가진다
- ADD [--chown=<user>:<group>] <src>... <dest>
- ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]


ex)
ADD hom* /mydir/

ADD hom?.txt /mydir/

ADD test.txt relativeDir/  <- 상대경로

UID와 GID 지정
ADD --chown=55:mygroup files* /somedir/
ADD --chown=bin files* /somedir/
ADD --chown=1 files* /somedir/
ADD --chown=10:11 files* /somedir/




6) COPY(ADD와 비슷?)
The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.
COPY 인스트럭션은 <src>로 부터 새 파일, 디렉토리를 복사하고 컨테이너의 파일 시스템에 추가한다.



COPY 인스트럭션은 다음 두 가지 형태를 가진다
- COPY [--chown=<user>:<group>] <src>... <dest>
- COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]



















