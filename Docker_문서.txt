https://docs.docker.com/get-started/overview/
https://www.44bits.io/ko/post/easy-deploy-with-docker
https://docs.docker.com/engine/reference/commandline/container_attach/ (도커 명령어)

▶ 도커 아키텍쳐
Docker는 클라이언트-서버 아키텍처
Docker 클라이언트는 Docker 데몬과 통신
Docker 데몬 은 Docker 컨테이너를 빌드, 실행 및 배포하는 작업을 많이 수행

▶ Docker 데몬
Docker 데몬 (dockerd)은 Docker API 요청을 수신하고 이미지, 컨테이너, 네트워크 및 볼륨과 같은 Docker 객체를 관리합니다. 
데몬은 다른 데몬과 통신하여 Docker 서비스를 관리 할 수도 있습니다.

▶ Docker 클라이언트
Docker 클라이언트 (docker)는 많은 Docker 사용자가 Docker와 상호 작용하는 기본 방법입니다.
사용자가 docker run과 같은 명령을 하면 클라이언트는 이 명령들을 Docker 데몬에게 보낸다.
Docker 클라이언트는 둘 이상의 데몬과 통신 할 수 있다.

▶ Docker 레지스트리
Docker 레지스트리 는 Docker 이미지를 저장합니다. 
Docker Hub는 누구나 사용할 수있는 공개 레지스트리이며 Docker는 기본적으로 Docker Hub에서 이미지를 찾도록 구성되어 있습니다. 
자신의 개인 레지스트리를 실행할 수도 있다.
Docker Datacenter (DDC)를 사용하는 경우 Docker Trusted Registry (DTR)가 포함됩니다.
docker pull또는 docker run명령 을 사용하면 필요한 이미지가 구성된 레지스트리에서 가져옵니다. 
docker push명령 을 사용하면 이미지가 구성된 레지스트리로 푸시됩니다.

▶ Docker 객체
Docker를 사용하면 이미지, 컨테이너, 네트워크, 볼륨, 플러그인 및 기타 객체를 생성 및 사용하게됩니다. 
이 섹션은 이러한 개체 중 일부에 대한 간략한 개요입니다.

1) 이미지
도커 컨테이너를 만들기 위한 읽기 전용 템플릿
자신의 이미지를 만들거나 다른 사람이 만들고 레지스트리에 게시 한 이미지 만 사용할 수 있습니다. 
자신의 이미지 를 작성하려면 이미지를 작성하고 실행하는 데 필요한 단계를 정의하기위한 간단한 구문 으로 Dockerfile 을 작성하십시오.

2) 컨테이너
컨테이너는 실행 가능한 이미지 인스턴스입니다.
Docker API 또는 CLI를 사용하여 컨테이너를 작성, 시작, 중지, 이동 또는 삭제할 수 있습니다.
컨테이너를 하나 이상의 네트워크에 연결하거나 스토리지를 연결하거나 현재 상태에 따라 새 이미지를 만들 수도 있습니다.

컨테이너는 이미지를 만들거나 시작할 때 제공하는 구성 옵션뿐만 아니라 이미지로 정의됩니다. 
컨테이너를 제거하면 영구 저장소에 저장되지 않은 상태 변경이 사라집니다.

Container identification (컨테이너 식별)
UUID long identifier -> ex) "f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778"
UUID short identifier -> ex) "f78375b1c48"
Name -> ex) "evil_ptolemy"


▶▶▶ Docker 설치
도커는 다양한 환경에서 사용할 수 있습니다. 
개발 환경에서는 주로 도커와 관련 도구들로 구성된 패키지인 Docker for Mac과 Docker for Windows를 사용합니다. 
단, 도커는 리눅스 컨테이너를 직접 지원하지 않는 macOS나 윈도우즈에서는 경량 가상머신이 중간에서 사용됩니다.

리눅스 환경에서는 각 배포판에서 제공하는 패키지 관리자를 사용해서 도커를 설치할 수 있습니다. 
단, 일반적으로 패키지 관리자는 보수적으로 관리되기 때문에 최신 버전을 설치하고자 한다면 도커에서 제공하는 스크립트를 사용해서 설치하는 것이 좋습니다. 
여기서는 이 스크립트를 사용해 정식 릴리즈된 도커 최신 버전을 설치해보겠습니다.

$ curl -s https://get.docker.com | sudo sh
( curl이 없다면 sudo apt-get curl로 설치합니다.)

$ docker -v
$ docker --version
(도커 버전 확인)

exit, Ctrl+D
(도커 컨테이너 내부 쉘에서 나가는 방법)

Ctrl+P, Q
(컨테이너를 종료시키지 않고 나오기)

▶▶▶ docker pull 명령으로 Docker Hub registry로 부터 이미지 다운로드
$ docker pull [OPTIONS] NAME[:TAG|@DIGEST]
$ docker pull [이미지 이름]:[태그]
(아래 명령어를 사용하면 도커 공식 이미지 저장소에서 이미지를 내려받습니다.)
ex) docker pull centos:7
ex) docker pull ubuntu

$ docker images
(이미지 확인)

$ docker create [옵션] [이미지 이름]:[태그]
ex) docker create -i -t centos:7



▶▶▶ 도커 이미지를 pull로 받아오고 commit 으로 파생된 이미지를 만들고 rmi 명령어로 삭제까지

$ docker start centos:7
(도커 컨테이너 실행)

$ docker attach [컨테이너 명]
$ docker attach centos:7
(컨테이너에 들어가기)

▶▶▶ run으로 컨테이너 실행 (컨테이너를 실행하는 일반적인 명령이다) <- 이 명령이 옵션이 좀 많다...
$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
$ docker run [옵션] [이미지 이름]:[태그] 
(생성 -> 실행 -> 들어가기 까지 한번에 해주는 명령)
- detached모드 또는 포그라운드 모드로 실행할 수 있다
- 컨테이너를 실별한다
- 네트워크 설정 가능
- 하드웨어 제약조건 기능도 있다


docker run 명령으로 개발자가 설정한 이미지 기본값들을 추가하거나 덮어쓸 수 있다(override) 그리고 Docker 런타임 자체에서 설정한 거의 모든 값들을 재정의 하는 것도 가능하다



-d   : 분리된 모드(-d=true 또는 -d) --rm 옵션과 같이 지정하지 않는 한 detached모드(프로세스의 백그라운드 모드라고 생각하자)로 실행된 컨테이너는 root 프로세스가 종료될 때 종료된다.
       만약에 --rm옵션과 -d를 같이 사용하면 컨테이너가 종료되거나 또는 데몬이 종료될 때 컨테이너가 제거된다.
       분리된 컨테이너에 다시 연결하려면 docker attach 명령을 사용
-d 옵션이 없으면 기본적으로 포그라운드로 실행하고, docker run은 컨테이너 내부에서 프로세스를 시작하고 이용하여 표준입력(STDIN), 표준출력(STDOUT), 표준에러(STDERR)를 콘솔 기반으로 프로세스에 연결한다
-a=[] : Attach to `STDIN`, `STDOUT` and/or `STDERR`

-i   : 상호 입출력(interactive)
-t   : tty를 활성화하여 bash 쉘을 사용 (이 명령이 없으면 파이프라이닝 사용할 수 없음)
--pid, --uts 옵션도 알아보자

네트워크 관련 옵션 ==========================================================================================
--dns=[] (이렇게 대괄호[]가 있으면 여러개 지정 가능하다는 뜻인가?) : 컨테이너에 대한 사용자 지정 DNS 서버 설정
--network="bridge" : 컨테이너를 네트워크에 연결
                      'bridge'                      -> 기본 Docker bridge에 네트워크 스택 생성
                      'none'                        -> 네트워킹 하지 않음
                      'container:<name|id>'         -> 다른 컨테이너의 네트워크 스택을 재사용
                      'host'                        -> Docker host 네트워크 스택 사용
                      '<network-name>|<network-id>' -> 사용자 정의 네트워크에 연결
--network-alias=[] : 컨테이너에 대한 네트워크 범위 별칭 추가
--add-host=""      : /etc/hosts(host:IP)에 행 추가
--mac-address=""   : 컨테이너의 이더넷 장치의 MAC주소를 설정
--ip=""            : 컨테이너의 이더넷 장치의 IPv4주소를 설정
--ip6=""           : 컨테이너의 이더넷 장치의 IPv6주소를 설정
--link-local-ip=[] : Sets one or more container's Ethernet device's link local IPv4/IPv6 addresses

▶ Network:none
컨테이너는 네트워킹을 할 수 없다.

▶ Network:bridge(default)
docker0라는 이름의 host에 브리지가 설정되고, 컨테이너에 대해 한 상의 veth 인터페이스가 생성된다.
veth 쌍의 한쪽은 브리지에 연결된 호스트에 남아있고, 다른 한 쪽은 loopback 인터페이스와 함께 컨테이너의 네임스페이스 내부에 배치된다.
브리지 네트워크에 있는 컨테이너들에게 IP주소가 할당되고, 트래픽은 이 브리지를 통해 컨테이너로 라우팅된다.

>>> 컨테이너들은 기본적으로 그들의 IP를 통해 커뮤니케이션을 할 수 있다. 컨테이너 이름으로 통신을 하려면 연결되어있어야 한다.

▶ Network:host
네트워크를 호스트로 설정하면 컨테이넌느 호스트의 네트워크 스택을 공유하고 호스트의 모든 인터페이스는 컨테이너에서 사용할 수 있다.
컨테이너의 호스트 이름은 호스트 시스템의 호스트 이름과 일치한다.
기본 브리지 모드와 비교하여 호스트 모드는 호스트 자체 네이티브 네트워킹 스택을 사용하기 때문에 훨씬 더 나은 네트워킹 성능을 제공한는 반면
브리지는 도커 데몬을 통해 한 단계 가상화를 거쳐야 한다.

▶ Network:container
네트워크를 컨테이너로 설정하면 컨테이너는 다른 컨테이너의 네트워크 스택을 공유한다.
다른 컨테이너의 이름은 --network container:<name|id>의 형식으로 제공되어야 한다.

▶ 사용자 정의 네트워크
Docker 네트워크 드라이버 또는 외부 네트워크 드라이버 플러그인을 사용하여 네트워크를 생성할 수 있다.
여러개의 컨테이너를 같은 네트워크에 연결할 수 있고, 사용자 정의 네트워크에 연결되면 컨테이너는 다른 컨테이너의 IP주소 또는 이름만으로 쉽게 통신할 수 있다.
멀티 호스트(multi-host) 연결을 지원하는 오버레이(overlay) 또는 사용자 정의 플러그인의 경우 컨테이너들이 서로 다른 엔진에서 시작되어도 
동일한 같은 multi-host 네트워크에 연결되어 있으면 통신할 수 있다.

▶ /etc/hosts 파일 관리하기
컨테이너에는 /etc/hosts에 컨테이너 자체의 호스트 이름과 localhost 및 여러가지 일반적인 사항들을 정의한다
--add-host 옵션으로 /etc/hosts에 라인을 추가할 수 있다
컨테이너가 기본 브리지 네트워크를 통해 다른 컨테이너들과 연결되어 있으면, /etc/hosts 파일이 연결된 컨테이너들의 이름으로 업데이트된다
Docker는 컨테이너들의 /etc/hosts 파일을 실시같으로 업데이트할 수 있으므로 컨테이너 내부의 프로세스 들이 비어있거나 불완전한 /etc/hosts 파일을 읽을 수도 있다
대부분의 경우 읽기를 다시 시도하면 이 문제가 해결된다.


리스타트 정책 - Restart policies(--restart) ==========================================================================================
Docker 실행할 때 --restart 옵션으로 컨테이너를 종료할 때 재시작하거나 또는 재시작하지 않아야 한는 리스타트 규정을 명시할 수 있다
리스타트 규정이 활성화되면 $ docker ps 에서 Up 또는 Restarting으로 표시된다.

Policy                     Result
-----------------------------------------------------------------
no(기본값)                   -> 컨테이너가 종료될 때 자동으로 재시작 하지 않는다
on-failure[:max-retries]   -> 컨테이너가 0이 아닌 종료 상태로 종료될 때만 다시 시작한다. 선택적으로 Docker 데몬이 시도하는 재시작 횟수를 제한할 수 있다.
always                     -> 컨테이너의 종료 상태와 관계없이 항상 컨테이너를 재시작한다. Docker 데몬이 컨테이너를 제한 횟수 없이 계속 재시작을 시도한다.
unless-stopped             -> Docker 데몬이 중지되기 전에 컨테이너가 중시된 경우를 제외하고, 데몬 시작을 포함하여 종료 상태에 관계없이 항상 컨테이너의 재시작으로 시도한다.



클린업 - Clean up(--rm) ==========================================================================================
기본적으로 컨테이너는 종료되어도 파일 시스템상에서 남아있다.
--rm 옵션으로 컨테이너가 종료될 때 자동으로 컨테이너를 정리하고, 파일 시스템을 제거하도록 한다.



들어오는 포트 열어주기 - EXPOSE(incoming ports) ==========================================================================================
--expose=[] : 컨테이너 내부의 포트 또는 포트의 범위를 노출한다
-P(대문자)    : 노출된 모든 포트를 호스트 인터페이스에 게시
-p=[]       : 컨테이너들 각각의 포트 또는 포트의 범위를 호스트에 게시
              포트 지정하는 형태 => ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort
              호스트와 컨테이너 둘 다 포트의 범위를 지정할 수 있다 호스트와 컨테이너 둘 다 포트의 범위를 지정할 때 해당 범위 안에서 컨테이너의 포트 수와 호스트의 포트 수는 일치해야 한다
              ex) -p 1234-1236:1234-1236/tcp
--link=""   : 기본 브리지 네트워크에서 새로운 클라이언트 컨테이너를 시작할 때 클라이언트 컨테이너는 개인 네트워킹 인터페이스를 통해 노출퇴 포트에 엑세스 할 수 있다.


$ docker run ubuntu:14.04
$ docker run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date
$ docker run -it --rm --pid=host myhtop
$ docker run --name my-redis -d redis
$ docker run -it --pid=container:my-redis my_strace_docker_image bash
$ docker run -i -t --name mywebserver -p 80:80 ubuntu:14.04






$ docker ps
(지금 실행중인 컨테이너 목록)
$ docker ps -a
(모든 컨테이너 목록)
===============================================================
CONTAINER ID : 컨테이너에게 자동으로 할당되는 고유한 ID
IMAGE : 컨테이너를 생성할 때 사용된 이미지 이름
COMMAND : 컨맨드는 컨테이너가 시작될 때 실행될 명렁어, 기본은 /bin/bash 명령어라 명령을 쓸 수 있습니다.
CREATED : 컨테이너가 생성되고 난 뒤 흐른 시간
STATUS : 컨테이너의 상태 ex) Up(실행 중), Exited(종료), Pause(일시 중지)
PORTS : 컨테이너가 개방한 포트와 호스트에 연결한 포트
NAMES : 컨테이너의 고유한 이름, --name 옵션으로 이름을 설정하지 않으면 도커 엔진이 임의의로 설정
===============================================================


$ docker rm [컨테이너 이름]

$ docker stop mycentos
$ docker rm mycentos

$ docker rm -f centos

(컨테이너 삭제 -> 만약 container가 실행 중이면 종료하고 삭제를 하거나 -f 옵션을 이용해서 강제로 삭제를 해야합니다.)

▶▶▶ 컨테이너는 가상 머신과 마찬가지로 가상 IP를 할당 받습니다.
아무 설정을 하지 않으면 기본적으로 컨테이너는 외부에서 접근할 수 없으며 도커가 설치된 호스트에서만 접근 가능합니다.

▶▶▶ 외부에 컨테이너의 어플리케이션을 노출하기 위해서는 eth0의 IP와 포트를 호스트의 IP와 포트에 바인딩해야 합니다.
-p 옵션을 이용해 컨테이너의 포트를 호스트의 포트와 바인딩해 연결할 수 있게 설정합니다.

-p [호스트의 포트]:[컨테이너의 포트]
$ docker run -i -t --name mywebserver -p 80:80 ubuntu:14.04

$ docker run -a stdin -a stdout -i -t ubuntu /bin/bash
-a 지정하지 않으면 Docker는 stdout과 stderr에 모두 연결됩니다. 세 가지 표준 스트림(STDIN, STDOUT, STDERR)을 지정할 수 있다


--link 
A컨테이너에서 B컨테이너로 접근하는 방법 중 하나입니다. ip가 아닌 alias로 접근할 수 있습니다.


============================================== Docker NetWork로 다른 컨테이너와 연결 ==============================================
▶▶▶ 도커 네트워크 생성
▶ 새로운 네트워크를 만듭니다. DRIVER는 내장 네트워크 드라이버 인 bridge 또는 overlay를 허용한다.
Docker Engine을 설치하면 bridge네트워크가 자동으로 생성 된다. 이 네트워크는  docker0 bridge와 통신한다. 
docker run으로 새 컨테이너를 실행하면 자동적으로 docker0 bridge 네트워크에 연결된다. 사용자는 이 기본 docker0 bridge 네트워크를 삭제할 수는 없지만
network create 명령을 사용하여 새로운 네트워크를 만들 수는 있다.
▶ 네트워크의 이름은 유일해야 하고, 이름 충돌을 피하는 것은 사용자의 책임이다.
$ docker network create [OPTIONS] NETWORK
$ docker network create -d bridge my-bridge-network





▶▶▶ 컨테이너를 네트워크에 연결
▶ 컨테이너를 네트워크에 연결합니다. 이름이나 ID로 컨테이너를 연결할 수 있습니다. 연결되면 컨테이너는 동일한 네트워크의 다른 컨테이너와 통신 할 수 있습니다.
▶ 연결되면 컨테이너는 다른 컨테이너의 IP 주소 또는 이름 만 사용하여 통신 할 수 있습니다.
$ docker network connect [OPTIONS] NETWORK CONTAINER
=========================== OPTIONS ===========================
--alias		Add network-scoped alias for the container
--driver-opt	driver options for the network
--ip		IPv4 address를 지정하는 옵션 (e.g., 172.30.100.104)
--ip6		IPv6 address를 지정하는 옵션 (e.g., 2001:db8::33)
--link		Add link to another container
--link-local-ip	Add a link-local address for the container
=============================================================
$ docker network connect multi-host-network container1
(실행중인 컨테이너를 네트워크에 연결)

$ docker run -itd --network=mynet busybox => busybox 컨테이너를 실행시키고 mynet 네트워크에 연결
$ docker run -itd --network=multi-host-network busybox
(컨테이너를 시작할 때 네트워크에 컨테이너를 연결)
(docker run --network=<network-name>옵션을 사용하여 컨테이너를 시작하고 즉시 네트워크에 연결할 수 있습니다.)

$ docker network connect --ip 10.10.36.122 multi-host-network container2
(컨테이너가 지정된 네트워크에서 사용할 IP 주소를 지정)

$ docker network connect --link container1:c1 multi-host-network container2
(--link 옵션을 사용하여 다른 컨테이너를 선호하는 별명으로 연결할 수 있다)

$ docker network connect --alias db --alias mysql multi-host-network container2
(--alias 옵션으로 별칭 지정)

==============================================================================
▶▶▶▶▶ 컨테이너 중지, 일시 중지 또는 다시 시작의 네트워크 영향
네트워크에 연결된 컨테이너를 일시 중지, 다시 시작 및 중지 할 수 있습니다. 컨테이너는 실행될 때 구성된 네트워크에 연결됩니다.
IP가 지정된 경우 중지 된 컨테이너가 다시 시작될 때 컨테이너의 IP 주소가 다시 적용됩니다.
IP 주소를 더 이상 사용할 수 없으면 컨테이너가 시작되지 않습니다.
IP 주소를 사용할 수 있게 하는 한 가지 방법은 네트워크를 만들 때 --ip-range 옵션을 지정하고 해당 범위 밖의 고정 IP 주소를 선택하는 것입니다. 
이렇게 하면이 컨테이너가 네트워크에 없는 동안 다른 컨테이너에 해당 IP 주소가 제공되지 않습니다.
==============================================================================

$ docker network create --subnet 172.20.0.0/16 --ip-range 172.20.240.0/20 multi-host-network

$ docker network connect --ip 172.20.128.2 multi-host-network container2


▶ 컨테이너가 연결되어 있는지 확인하려면 docker network inspect 명령을 사용
▶ 네트워크에서 컨테이너를 제거하려면 docker network disconnect 명령을 사용



▶▶▶ 네트워크 리스트
$ docker network ls [OPTIONS]
(모든 네트워크 리스트)

$ sudo docker network ls
NETWORK ID          NAME                DRIVER          SCOPE
7fca4eb8c647        bridge              bridge          local
9f904ee27bf5        none                null            local
cf03ee007fb4        host                host            local
78b03ee04fc4        multi-host          overlay         swarm


$ docker network ls --no-trunc
(--no-trunc 옵션은 full network id를 보여준다)

$ docker network ls --no-trunc
NETWORK ID                                                         NAME                DRIVER           SCOPE
18a2866682b85619a026c81b98a5e375bd33e1b0936a26cc497c283d27bae9b3   none                null             local
c288470c46f6c8949c5f7e5099b5b7947b07eabe8d9a27d79a9cbf111adcbf47   host                host             local
7b369448dccbf865d397c8d2be0cda7cf7edc6b0945f77d2529912ae917a0185   bridge              bridge           local
95e74588f40db048e86320c6526440c504650a1ff3e9f7d60a497c4d2163e5bd   foo                 bridge           local
63d1ff1f77b07ca51070a8c227e962238358bd310bde1529cf62e6c307ade161   dev                 bridge           local

Filtering 옵션(-f or --filter)
- id (network’s id)
- name (network’s name)
- scope (swarm|global|local)
- type (custom|builtin)






============================================== Docker Image 관련 명령들 ==============================================
$ docker image build [OPTIONS] PATH | URL | -
-> Dockerfile로부터 이미지 빌드
$ docker image history [OPTIONS] IMAGE
-> 이미지의 히스토리 표시
$ docker image import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
-> Import the contents from a tarball to create a filesystem image
$ docker image inspect [OPTIONS] IMAGE [IMAGE...]
-> 하나 이상의 이미지에 대한 자세한 정보 표시
$ docker image load [OPTIONS]
-> tar 아카이브 또는 STDIN에서 이미지로드
$ docker image ls [OPTIONS] [REPOSITORY[:TAG]]
-> 이미지 목록
$ docker image prune [OPTIONS]
-> 사용하지 않은 이미지들을 제거
$ docker image pull [OPTIONS] NAME[:TAG|@DIGEST]
-> Pull an image or a repository from a registry
$ docker image push [OPTIONS] NAME[:TAG]
-> Push an image or a repository to a registry
$ docker image rm [OPTIONS] IMAGE [IMAGE...]
-> 하나 이상의 이미지 제거
$ docker image save [OPTIONS] IMAGE [IMAGE...]
-> Save one or more images to a tar archive (streamed to STDOUT by default)
$ docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
-> Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE




============================================== Docker Container 관련 명령들 ==============================================
$ docker container attach [OPTIONS] CONTAINER
-> 로컬 표준 입력, 출력 및 오류 스트림을 실행중인 컨테이너에 연결
$ docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
-> 컨테이너의 변경 사항으로 새 이미지 만들기
$ docker container cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
-> 컨테이너와 로컬 파일 시스템간에 파일 / 폴더 복사
$ docker container create [OPTIONS] IMAGE [COMMAND] [ARG...]
-> 새 컨테이너 만들기
$ docker container diff CONTAINER
-> 컨테이너 파일 시스템의 파일 또는 디렉토리 변경 사항 검사
$ docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]
-> 실행중인 컨테이너에서 명령을 실행하기
$ docker container export [OPTIONS] CONTAINER
-> 컨테이너 들의 파일시스템을 tar 형태로 내보낸다
$ docker container inspect [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너에 대한 자세한 정보 표시
$ docker container kill [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 실행중인 컨테이너에 시그널을 보낸다
$ docker container logs [OPTIONS] CONTAINER
-> 컨테이너의 로그를 가져온다
$ docker container ls [OPTIONS]
-> 컨테이너 목록
$ docker container pause CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너 내에서 모든 프로세스 일시 중지
$ docker container port CONTAINER [PRIVATE_PORT[/PROTO]]
-> 컨테이너에 대한 포트 매핑 또는 특정 매핑 나열
$ docker container prune [OPTIONS]
-> 멈춘 컨테이너를 모두 제거
$ docker container rename CONTAINER NEW_NAME
-> 컨테이너 이름 바꾸기
$ docker container restart [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너를 다시 시작
$ docker container rm [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너 제거
$ docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
-> 새 컨테이너에서 명령을 실행
$ docker container start [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 중지 된 컨테이너 시작
$ docker container stats [OPTIONS] [CONTAINER...]
-> 컨테이너 리소스 사용량 통계의 실시간 스트림 표시
$ docker container stop [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 실행중인 컨테이너를 중지
$ docker container top CONTAINER [ps OPTIONS]
-> 컨테이너에서 실행중인 프로세스들을 표시한다
$ docker container unpause CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너 내에서 모든 프로세스 일시 중지를 해제
$ docker container update [OPTIONS] CONTAINER [CONTAINER...]
-> 하나 이상의 컨테이너 구성 업데이트
$ docker container wait CONTAINER [CONTAINER...]
-> Block until one or more containers stop, then print their exit codes



============================================== Docker Network 관련 명령들 ==============================================
$ docker network connect [OPTIONS] NETWORK CONTAINER
-> 컨테이너를 네트워크에 연결
$ docker network create [OPTIONS] NETWORK
-> 새 네트워크를 생성
$ docker network disconnect [OPTIONS] NETWORK CONTAINER
-> 네트워크에서 컨테이너 연결 끊기
$ docker network inspect [OPTIONS] NETWORK [NETWORK...]
-> 하나 이상의 네트워크들에 대한 자세한 정보 표시
$ docker network ls [OPTIONS]
-> 네트워크 목록
$ docker network prune [OPTIONS]
-> 사용하지 않는 모든 네트워크 제거
$ docker network rm NETWORK [NETWORK...]
-> 하나 이상의 네트워크를 제거






